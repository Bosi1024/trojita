<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [

<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC3501 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3501.xml">
<!ENTITY RFC4409 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4409.xml">
<!ENTITY RFC4467 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4467.xml">
<!ENTITY RFC4468 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4468.xml">
<!ENTITY RFC4469 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4469.xml">
<!ENTITY RFC4551 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4551.xml">
<!ENTITY RFC5172 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5172.xml">
<!ENTITY RFC5228 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5228.xml">
<!ENTITY RFC5234 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5234.xml">
<!ENTITY RFC5321 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5321.xml">
<!ENTITY RFC5322 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5322.xml">
<!ENTITY RFC5550 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5550.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="std" docName="draft-imap-sendmail-01" ipr="trust200902">

  <front>
    <title>IMAP SENDMAIL Extension</title>

    <author fullname="Jan Kundrat" initials="J." surname="Kundrat">
      <address>
        <postal>
          <street>Eledrova 558</street>
          <city>Prague</city>
          <code>181 00</code>
          <country>CZ</country>
        </postal>
        <email>jkt@flaska.net</email>
      </address>
    </author>

    <date year="2012" />

    <area>General</area>
    <workgroup>Internet Engineering Task Force</workgroup>

    <keyword>IMAP</keyword>
    <keyword>QRESYNC</keyword>
    <keyword>EXISTS</keyword>
    <keyword>EXPUNGE</keyword>
    <keyword>VANISHED</keyword>
    <keyword>ARRIVED</keyword>

    <abstract>
        <t>This document extends the IMAP protocol with a feature to submit e-mail messages for delivery.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
        <t>Many proposals exist which aim at providing the forward-without-download feature where user can reuse parts
            of her message for composing and sending a new one.  The CATENATE extension <xref target="RFC4469"/> adds a
            method for constructing an IMAP message from parts to be obtained purely on the server side; the LEMONADE
            extension <xref target="RFC5550"/> mandates full support for BURL <xref target="RFC4468"/> and URLAUTH <xref
                target="RFC4467"/>.  Together with a properly configured IMAP and SMTP servers and with enough client
            support, these extensions allow for possibility to forward messages without a prior download.</t>
        
        <t>This functionality puts a certain burden on clients -- each of them must be properly configured with two
            accounts instead of one.  It is not enough to configure user's client for access to IMAP, one must also
            provide all details for a proper SMTP server if it's required to be able to send e-mails.  In addition, both
            SMTP and IMAP servers have to be properly configured to allow an additional mode of authentication and
            authorization.</t>

        <t>This extension drastically simplifies the client operation and minimizes configuration requirements on the
            server side.  If combined with the existing CATENATE extension <xref target="RFC4469"/>, it works at least
            as effectively as the Lemonade trio.</t>

      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
        target="RFC2119">RFC 2119</xref>.</t>
      </section>
    </section>

    <section title="Mode of Operation">
        <t>The SENDMAIL extension adds the UID SENDMAIL IMAP command which instructs the IMAP server to arrange for
            delivery of an already existing IMAP message.  How this message is composed is outside of scope of this
            extension, but it is assumed that clients will often use the APPEND or APPEND ... CATENATE commands.</t>

        <t>Upon receiving the SENDMAIL command, the IMAP server is asked for arranging the message submission.  Clients
            MAY pass additional data in form of various options of the SENDMAIL command.  The server checks the passed
            data and submission options, optionally performs sanity checks on the message contents, verifies against a
            local policy that the user is authorized for message submission, and if none of these checks fails, the
            server passes the message for final delivery.  The delivery method is outside of scope of this document, but
            typical methods would be invoking the `sendmail` binary or passing the message to an ESMTP gateway.</t>
    </section>

    <section title="IMAP Protocol Changes">
        <t>This extension introduces one new IMAP command, a few capabilities and related response codes.</t>
        <section title="New IMAP Capabilities">
            <section title="The SENDMAIL Capability">
                <t>Servers implementing this extension announce its presence through the SENDMAIL capability.  If the
                    server supports this extension but message submission is unconditionally disabled by a security
                    policy or service configuration, this capability MUST NOT be announced.</t>
            </section>

            <section title="The SENDMAIL= Capabilities Family">
                <t>The SENDMAIL command MAY contain submission options.  Servers supporting voluntary features MUST
                    indicate so by including the appropriate strings in the CAPABILITY responses.  All capabilities used
                    for these purposes use the SENDMAIL= prefix.</t>

                <section title="SENDMAIL=DSN">
                    <t>If the server supports user control of generating the Delivery Status Notifications (DSN), it
                        MUST announce the SENDMAIL=DSN capability.  Clients MUST NOT attempt to control DSN options
                        through the DSN submission option unless the server announced SENDMAIL=DSN.</t>
                </section>
            </section>
        </section>

        <section title="Additional Response Codes">
            <t>The following response codes are defined for communicating the reason why submission failed in a
                machine-readable way.</t>

            <section title="The POLICYDENIED Response Code">
                <t>The POLICYDENIED response code SHOULD be used if the server rejects message submission as a result of
                    a policy based decision which MAY take the message content, user's behavior and transaction history
                    into account.</t>
            </section>

            <section title="The SUBMISSIONRACE Response Code">
                <t>The SUBMISSIONRACE response code MUST be sent in the tagged response if the client asks for
                    submission of a message that is either not marked with the $SubmitPending keyword or marked with the
                    $Submitted keyword.</t>
            </section>
        </section>

        <section title="UID SENDMAIL command">
            <t>The UID SENDMAIL command submits a message for delivery.</t>

            <t>Arguments: <list style="symbols">
                <t>UID of message to be sent</t>
                <t>optional list of submission options</t>
            </list></t>

            <t>Responses: FETCH response with updated message flags</t>

            <t>Result: <list style="hanging">
                    <t hangText="OK">Message submitted for delivery</t>
                    <t hangText="NO">Submission failed</t>
                    <t hangText="BAD">Invalid commands or options</t>
            </list></t>

            <t>This command is only valid in the selected state.</t>

            <t>The server MUST check its local policy configuration and verify that the authenticated user is allowed to
                submit messages.  The decision MAY be based on the user's credentials, the message contents, past
                history of the user, or any other criteria the server deems relevant.  The server SHOULD take into
                account any other local policies before it proceeds with further submission.</t>

            <t>Clients MUST NOT submit a message which is either not marked with the $SubmitPending keyword from <xref
                    target="RFC5550"/>, or which is marked with the $Submitted keyword.  Servers MUST reject such a
                command with a tagged NO bearing the SUBMISSIONRACE response code.</t>

            <t>In the course of submission, servers SHOULD atomically add the $Submitted flag to the message, as
                described in LEMONADE <xref target="RFC5550"/>.  This transition MAY be hidden from any IMAP session or
                it MAY be visible in all of them.</t>
                
            <t>If the command succeeded, the message MUST be marked with the $Submitted keyword, the $SubmitPending
                keyword MUST be cleared and a FETCH response containing the message UID and its new flags MUST be
                sent.</t>

            <t>If the command failed, the server MUST clear both the $Submitted or $SubmitPending keywords.</t>
                
            <t>If the server supports CONDSTORE <xref target="RFC4551"/> or QRESYNC <xref target="RFC5172"/> extensions,
                any flag changes MUST obey the usual MODSEQ invariants.</t>

            <t>Clients MUST be prepared to handle failing submission at any time.  Servers MAY reject message submission
                for any reason.</t>

            <t>The server MUST process all specified submission options.  The server MUST respond with a tagged BAD if
                the client used unrecognized or unannounced submission option.  If the server cannot honor a recognized
                and announced submission option, it MUST respond with a tagged NO with the POLICYDENIED response
                code and the message MUST NOT be submitted.</t>

            <t>Servers MAY alter the message payload of the outgoing message in conformance with best current practice about
                Internet mail.  Individual recipients MAY receive different versions of the message.  In particular, servers MUST
                change message headers so that the identity of addresses present in the Bcc headers is not revealed to other
                recipients.  This mode of operation is described in <xref target="RFC5321"/> and <xref target="RFC5322"/>.  The
                copy stored on the IMAP server MUST NOT be altered by these modifications.</t>

            <section title="Submission options">
                <t>The following submission options are defined by this extension:</t>

                <section title="FROM Submission Option">
                    <t>Syntax: one e-mail address</t>

                    <t>The FROM submission option corresponds to the FROM field of the SMTP envelope.  If not present,
                        its value MUST be inferred from the message payload.</t>

                    <t>It is an error if the FROM submission option is present more than once.</t>
                </section>

                <section title="DSN Submission Option">
                    <t>Syntax: delivery status notice specification</t>
                    <t>The DSN submission option controls generating of delivery status notifications related to the
                        currently submitted message.  When not given, an implementation-defined default value MUST be
                        used.</t>
                    <t>It is an error if the DSN submission option is present multiple times.</t>
                    <t>Clients MUST NOT specify the DSN submission option unless the server announces the SENDMAIL=DSN
                        capability.  Support for the SENDMAIL=DSN submission option is OPTIONAL.</t>
                    <t>The DSN specification is either NIL to deactivate DSNs altogether, or a parenthesized list of any
                        of the following options:</t>
                    <t><list style="hanging">
                            <t hangText="SUCCESS"> requests generating DSNs upon successful delivery of a message</t>
                            <t hangText="DELAY"> activates generating DSNs when delivery is delayed</t>
                            <t hangText="FAILURE"> requests generating DSNs when the delivery fails</t>
                    </list></t>
                    <t>The order of DSN requests is not significant.</t>
                </section>

                <section title="RECIPIENT Submission Option">
                    <t>Syntax: one e-mail address</t>

                    <t>The RECIPIENT submission option corresponds to the TO field of the SMTP envelope.</t>

                    <t>The RECIPIENT submission option MAY be present more than once.  Servers MAY impose a limit on the
                        number of recipients of a single message.</t>

                    <t>If the RECIPIENT submission option is present, servers MUST ignore any To, Cc and Bcc headers in
                        the message payload when determining the list of recipients of this message.  That is, the final
                        list of recipients of the message MUST consist exactly of those recipients specified in the
                        RECIPIENT submission options.</t>

                    <t>If the RECIPIENT submission option is missing, servers MUST infer its value from the message
                        payload.  For example, each address present in any of To, Cc and Bcc message headers SHOULD be
                        present in the recipient list.</t>

                    <t>Servers MAY impose a local policy decision about always sending a copy of message to a certain
                        address.  This operation MUST NOT affect the user-specified list of recipients passed through
                        the RECIPIENTS submission options.</t>

                    <t>Message submission MUST be atomic -- message is either submitted for delivery to all recipients,
                        or it MUST NOT be submitted for delivery to anyone.</t>
                </section>
            </section>
        </section>
    </section>

    <section title="Example">
        <t>This section contains an example of how message submission over IMAP works.</t>

        <t>The following example shows how client should submit a message with UID 123 in the current mailbox for
            delivery.  If the message is passed through SMTP, its From address in the SMTP envelope MUST be set to
            foo@example.org and it MUST be submitted for delivery to two recipients, the a@example.org and b@example.org.  The DSN
            options are set to report about excess delays failures in message delivery.</t>

        <figure align="center">
            <artwork align="left"><![CDATA[
C: x UID SENDMAIL 123 (FROM "foo@example.org"
        FROM "bar@example.org"
        RECIPIENT "a@example.org"
        RECIPIENT "b@example.org"
        DSN (delay failure)
    )
S: * 10 FETCH (UID 123 FLAGS ($Submitted))
S: x OK Message passed to the sendmail binary]]></artwork>
        </figure>

        <t>In the following example, a message is delivered to addresses specified in the message payload.  No
            submission options are given, and therefore the From and Sender envelope items are inferred from the actual
            payload.  The DSN options, if supported, are set to an implementation-defined default value.</t>

        <figure align="center">
            <artwork align="left"><![CDATA[
C: x UID SENDMAIL 123
S: * 10 FETCH (UID 123 FLAGS ($Submitted))
S: x OK Message passed to the sendmail binary]]></artwork>
        </figure>

    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>FIXME</t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>IMAP4 capabilities are registered by publishing a standards track or IESG approved experimental RFC.  The
          registry is currently located at:</t>
      <t>http://www.iana.org/assignments/imap4-capabilities</t>
      <t>This document defines the following list of IMAP capabilities.  IANA will be asked to add them to the
          registry:</t>
      <t><list style="symbols">
              <t>SENDMAIL</t>
              <t>SENDMAIL=DSN</t>
      </list></t>
      <t>FIXME: response codes</t>
    </section>

    <section anchor="ABNF" title="Formal Syntax">
        <t>The following syntax specification uses the Augmented Backus-Naur
            Form (ABNF) notation as specified in <xref target="RFC5234"/>.</t>

        <t>Non-terminals referenced but not defined below are as defined by
            <xref target="RFC3501"/>, or <xref target="RFC5234"/>.</t>

        <figure align="center">
            <artwork align="left" type="abnf"><![CDATA[
capability          =/ "SENDMAIL" / "SENDMAIL=DSN"

uid                 =/ "UID" SP sendmail

sendmail            = "SENDMAIL" SP uniqueid [SP submission-options]

submission-options  = "(" submission-option *( SP submission-option ) ")"

submission-option   = sub-option-from / sub-option-recipient
                      / sub-option-dsn

sub-option-from     = "FROM" SP one-email-addr
                      ;; MUST NOT be present more than once

sub-option-recipient= "RECIPIENT" SP one-email-addr
                      ;; MAY be present more than once

sub-option-dsn      = "DSN" SP ( NIL / dsn-spec )
                      ;; MUST NOT be present more than once

dsn-spec            = "(" dsn-spec-item *( SP dsn-spec-item ) ")"
                      ;; an individual dsn-spec-item MUST NOT
                      ;; be present more than once

dsn-spec-item       = "DELAY" / "FAILURE" / "SUCCESS"

one-email-addr      = string
                      ;; valid e-mail address as per [RFC5321]
]]></artwork>
        </figure>
    </section>

    <section anchor="Security" title="Security Considerations">
        <t>This extension introduces a way of allowing authenticated users to submit Internet mail.  Servers supporting
            this extension SHOULD implement the same security measures as other SUBMISSION <xref target="RFC4409"/>
            servers open to users.</t>
        <t>The redirect command from SIEVE <xref target="RFC5228"/> already requires some types of IMAP message stores
            to be able to generate outgoing mail.  Security considerations for this extension are similar.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      &RFC2119;

      &RFC5234;

      &RFC3501;

      &RFC4409;

      &RFC4467;

      &RFC4468;

      &RFC4469;

      &RFC4551;

      &RFC5172;

      &RFC5228;

      &RFC5321;

      &RFC5322;

      &RFC5550;
    </references>

    <section anchor="FIXME" title="FIXME Items">
      <t>FIXME: better citations</t>
      <t>What's got higher priority, SUBMISSIONRACE or POLICYDENIED? :)</t>
      <t>IANA and the response codes</t>
    </section>

    <section anchor="changelog" title="Changelog">
        <section title="Changes in 01 since 00">
            <t><list style="symbols">
                    <t>Removed the superfluous SENDER submission option</t>
                    <t>Mandating Bcc removal in conformance with RFC 5321 / RFC 5322</t>
            </list></t>
        </section>
    </section>
  </back>
</rfc>
